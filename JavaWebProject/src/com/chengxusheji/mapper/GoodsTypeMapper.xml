<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.GoodsTypeMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加商品类型记录 -->
	<insert id="addGoodsType" parameterType="goodsType">
		insert into t_goodsType(goodTypeName) values 
		(#{goodTypeName})
	</insert>

	<!-- 按照查询条件分页查询商品类型记录 -->
	<select id="queryGoodsType" resultMap="goodsTypeMap" >
		select t_goodsType.* from t_goodsType ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="goodsTypeMap" type="goodsType">
        <id property="goodTypeId" column="goodTypeId" />
    </resultMap>

    <!-- 按照查询条件查询所有商品类型记录 -->
	<select id="queryGoodsTypeList" resultMap="goodsTypeMap" >
		select t_goodsType.* from t_goodsType ${where}
	</select>

    <!-- 按照查询条件的商品类型记录数 -->
	<select id="queryGoodsTypeCount" resultType="int">
		select count(*) from t_goodsType ${where}
	</select>

	<!-- 根据主键查询某个商品类型记录 -->
	<select id="getGoodsType" parameterType="int" resultMap="goodsTypeMap">
		select * from t_goodsType where t_goodsType.goodTypeId = #{goodTypeId}
	</select>

	<!-- 更新商品类型记录 -->
	<update id="updateGoodsType" parameterType="goodsType">
		update t_goodsType set goodTypeName=#{goodTypeName} where goodTypeId = #{goodTypeId}
	</update>

	<!-- 删除商品类型记录 -->
	<delete id="deleteGoodsType" parameterType="int">
		delete from t_goodsType where goodTypeId=#{goodTypeId}
	</delete>

</mapper>
